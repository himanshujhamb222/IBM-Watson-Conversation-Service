import os, sys
from flask import Flask, request
from pymessenger import Bot
import pickle as p
from watson_developer_cloud import ConversationV1
import json
#from convo_fb_bot_trials import getWatsonConverstationApiResponse
app = Flask(__name__)



watsonUsername='xxx'
watsonPassword='xxx'
watsonVersion='xxx'

watsonworkspaceId = 'xxx'
def getWatsonConverstationApiResponse(message,context=''):

    conversation = ConversationV1(
        username=watsonUsername,
        password=watsonPassword,
        version=watsonVersion
    )

    message_body = {

                "text": message,



        }


    print(json.dumps(message_body, indent=2))
    response = conversation.message(workspace_id=watsonworkspaceId, message_input=message_body,
                                        context=context, alternate_intents=True)
    textReply=response['output']['text']
    context = response['context']
    if response['output']['nodes_visited'][0]!='Anything_Node':
        print("#"*10)
        p.dump(context,open("context.p",'wb'))
        print(json.dumps(context,indent=2))
    print(textReply)
    return [textReply,context]

app = Flask(__name__)

PAGE_ACCESS_TOKEN = "xxx"

bot = Bot(PAGE_ACCESS_TOKEN)


@app.route('/', methods=['GET'])
def verify():
	# Webhook verification
    if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.challenge"):
        if not request.args.get("hub.verify_token") == "token":
            return "Verification token mismatch", 403
        return request.args["hub.challenge"], 200
    return "Hello world", 200


@app.route('/', methods=['POST'])
def webhook():
    data = request.get_json()
    log(data)

    if data['object'] == 'page':
        for entry in data['entry']:
            for messaging_event in entry['messaging']:

                # IDs
                sender_id = messaging_event['sender']['id']
                recipient_id = messaging_event['recipient']['id']

                if messaging_event.get('message'):
                    # Extracting text message
                    if 'text' in messaging_event['message']:
                        messaging_text = messaging_event['message']['text']
                    else:
                        messaging_text = 'no text'

                    # Echo
                    response = messaging_text

                    try:
                        context = p.load(open("context.p",'rb')
                        print("read_context")
                        print(json.dumps(context,indent=2))
                        [watsonResponse, context] = getWatsonConverstationApiResponse(messaging_text, context)
                        print(watsonResponse)
                        for i in range(0,len(watsonResponse)):
                            bot.send_text_message(sender_id, watsonResponse[i])
                    except Exception as e:
                       print(e)

    return "ok", 200


def log(message):
    print(message)
    sys.stdout.flush()


if __name__ == "__main__":
    app.run(debug = True, port = 5000)
